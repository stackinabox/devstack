# -*- mode: ruby -*-
# vi: set ft=ruby :

ENV["LC_ALL"] = "en_US.UTF-8"
ENV["LANG"] = "en_US.UTF-8"

vagrant_dir = File.expand_path(File.dirname(__FILE__))
personalization = File.expand_path(File.join(vagrant_dir, "Personalization"), __FILE__)
load personalization


# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.auto_update = false
  end

  config.vm.define "stackinabox" do |stackinabox|
    config.vm.synced_folder File.expand_path(File.join(vagrant_dir, ".."), __FILE__), "/vagrant"#, :nfs => $use_nfs
    config.ssh.forward_agent = true
    config.ssh.insert_key = false

    # Every Vagrant virtual environment requires a base box
    stackinabox.vm.box = $box
    stackinabox.vm.box_url = $box_url
    stackinabox.vm.box_download_insecure = true

    stackinabox.vm.hostname = "openstack.stackinabox.io"
    # eth1, this will be OpenStacks's "management" network autoconfigured on vm by vbox
    stackinabox.vm.network "private_network", ip: "192.168.27.100", adapter_ip: "192.168.27.1", netmask: "255.255.255.0", auto_config: true
    # eth2, this will be OpenStack's "public" network configured on vm by stackinabox.sh script and bridged to OpenvSwitch on VM
    stackinabox.vm.network "private_network", ip: "172.24.4.225", adapter_ip: "172.24.4.225", netmask: "255.255.255.0", auto_config: false

    # Provider-specific configuration
    stackinabox.vm.provider "virtualbox" do |vb|
      vb.name = "stackinabox" # sets the name that virtual box will show in it's UI

      # Use VBoxManage to customize the VM.
      vb.customize ["modifyvm", :id, "--ioapic", "on"] # turn on I/O APIC
      vb.customize ["modifyvm", :id, "--cpus", "#{$cpus}"] # set number of vcpus
      vb.customize ["modifyvm", :id, "--memory", "#{$memory}"] # set amount of memory allocated vm memory
      vb.customize ["modifyvm", :id, "--ostype", "Ubuntu_64"] # set guest OS type
      vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"] # enables DNS resolution from guest using host's DNS
      vb.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"] # turn on promiscuous mode on nic 3
      vb.customize ["modifyvm", :id, "--nictype1", "virtio"]
      vb.customize ["modifyvm", :id, "--nictype2", "virtio"]
      vb.customize ["modifyvm", :id, "--nictype3", "virtio"]
      vb.customize ["modifyvm", :id, "--pae", "on"] # enables PAE
      vb.customize ["modifyvm", :id, "--longmode", "on"] # enables long mode (64 bit mode in GUEST OS)
      vb.customize ["modifyvm", :id, "--hpet", "on"] # enables a High Precision Event Timer (HPET)
      vb.customize ["modifyvm", :id, "--hwvirtex", "on"] # turn on host hardware virtualization extensions (VT-x|AMD-V)
      vb.customize ["modifyvm", :id, "--nestedpaging", "on"] # if --hwvirtex is on, this enables nested paging
      vb.customize ["modifyvm", :id, "--largepages", "on"] # if --hwvirtex & --nestedpaging are on
      vb.customize ["modifyvm", :id, "--vtxvpid", "on"] # if --hwvirtex on
      vb.customize ["modifyvm", :id, "--vtxux", "on"] # if --vtux on (Intel VT-x only) enables unrestricted guest mode
      vb.customize ["modifyvm", :id, "--boot1", "disk"] # tells vm to boot from disk only
      vb.customize ["modifyvm", :id, "--rtcuseutc", "on"] # lets the real-time clock (RTC) operate in UTC time
      vb.customize ["modifyvm", :id, "--audio", "none"]
      vb.customize ["modifyvm", :id, "--clipboard", "disabled"]
      vb.customize ["modifyvm", :id, "--usbehci", "off"]
      vb.customize ["modifyvm", :id, "--vrde", "off"]
      vb.customize ["guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 10000]

      if !File.exists?($disk)
        print $disk
        vb.customize ['createhd', '--filename', $disk, '--size', 500 * 1024]
      end
      vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', $disk]
    end
    stackinabox.vm.provision "openstack", type: "shell", privileged: false, keep_color: false, path: File.expand_path(File.join(vagrant_dir, "..", "scripts", "stackinabox", "init.sh"), __FILE__), args: "#{$release_branch} #{$mtu}"
    #Run this after a vagrant reload
    stackinabox.vm.provision "post-config", type: "shell", privileged: false, keep_color: false, path: File.expand_path(File.join(vagrant_dir, "..", "scripts", "stackinabox", "post-config.sh"), __FILE__), args: "#{$release_branch} #{$mtu}"

#    stackinabox.vm.provision "file", source: File.expand_path(File.join(vagrant_dir, "..", "scripts", "stackinabox", "openrc"), __FILE__), destination: "/home/vagrant/openrc"
#    stackinabox.vm.provision :shell, name: "add_docker_heat_plugin", privileged: false, keep_color: false, path: File.expand_path(File.join(vagrant_dir, "..", "scripts", "docker", "heat.sh"), __FILE__)
  end
end
